
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Movie
 * 
 */
export type Movie = $Result.DefaultSelection<Prisma.$MoviePayload>
/**
 * Model RentedMovie
 * 
 */
export type RentedMovie = $Result.DefaultSelection<Prisma.$RentedMoviePayload>
/**
 * Model Pictures
 * 
 */
export type Pictures = $Result.DefaultSelection<Prisma.$PicturesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.movie`: Exposes CRUD operations for the **Movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movie.findMany()
    * ```
    */
  get movie(): Prisma.MovieDelegate<ExtArgs>;

  /**
   * `prisma.rentedMovie`: Exposes CRUD operations for the **RentedMovie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RentedMovies
    * const rentedMovies = await prisma.rentedMovie.findMany()
    * ```
    */
  get rentedMovie(): Prisma.RentedMovieDelegate<ExtArgs>;

  /**
   * `prisma.pictures`: Exposes CRUD operations for the **Pictures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pictures
    * const pictures = await prisma.pictures.findMany()
    * ```
    */
  get pictures(): Prisma.PicturesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Movie: 'Movie',
    RentedMovie: 'RentedMovie',
    Pictures: 'Pictures'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'movie' | 'rentedMovie' | 'pictures'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Movie: {
        payload: Prisma.$MoviePayload<ExtArgs>
        fields: Prisma.MovieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          findFirst: {
            args: Prisma.MovieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          findMany: {
            args: Prisma.MovieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>[]
          }
          create: {
            args: Prisma.MovieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          createMany: {
            args: Prisma.MovieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>[]
          }
          delete: {
            args: Prisma.MovieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          update: {
            args: Prisma.MovieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          deleteMany: {
            args: Prisma.MovieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MovieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MovieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MoviePayload>
          }
          aggregate: {
            args: Prisma.MovieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMovie>
          }
          groupBy: {
            args: Prisma.MovieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MovieGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieCountArgs<ExtArgs>,
            result: $Utils.Optional<MovieCountAggregateOutputType> | number
          }
        }
      }
      RentedMovie: {
        payload: Prisma.$RentedMoviePayload<ExtArgs>
        fields: Prisma.RentedMovieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentedMovieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentedMovieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>
          }
          findFirst: {
            args: Prisma.RentedMovieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentedMovieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>
          }
          findMany: {
            args: Prisma.RentedMovieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>[]
          }
          create: {
            args: Prisma.RentedMovieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>
          }
          createMany: {
            args: Prisma.RentedMovieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RentedMovieCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>[]
          }
          delete: {
            args: Prisma.RentedMovieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>
          }
          update: {
            args: Prisma.RentedMovieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>
          }
          deleteMany: {
            args: Prisma.RentedMovieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RentedMovieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RentedMovieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentedMoviePayload>
          }
          aggregate: {
            args: Prisma.RentedMovieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRentedMovie>
          }
          groupBy: {
            args: Prisma.RentedMovieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RentedMovieGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentedMovieCountArgs<ExtArgs>,
            result: $Utils.Optional<RentedMovieCountAggregateOutputType> | number
          }
        }
      }
      Pictures: {
        payload: Prisma.$PicturesPayload<ExtArgs>
        fields: Prisma.PicturesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PicturesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PicturesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>
          }
          findFirst: {
            args: Prisma.PicturesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PicturesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>
          }
          findMany: {
            args: Prisma.PicturesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>[]
          }
          create: {
            args: Prisma.PicturesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>
          }
          createMany: {
            args: Prisma.PicturesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PicturesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>[]
          }
          delete: {
            args: Prisma.PicturesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>
          }
          update: {
            args: Prisma.PicturesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>
          }
          deleteMany: {
            args: Prisma.PicturesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PicturesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PicturesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PicturesPayload>
          }
          aggregate: {
            args: Prisma.PicturesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePictures>
          }
          groupBy: {
            args: Prisma.PicturesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PicturesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PicturesCountArgs<ExtArgs>,
            result: $Utils.Optional<PicturesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    RentedMovie: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RentedMovie?: boolean | UserCountOutputTypeCountRentedMovieArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRentedMovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentedMovieWhereInput
  }


  /**
   * Count Type MovieCountOutputType
   */

  export type MovieCountOutputType = {
    rentedMovies: number
  }

  export type MovieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rentedMovies?: boolean | MovieCountOutputTypeCountRentedMoviesArgs
  }

  // Custom InputTypes
  /**
   * MovieCountOutputType without action
   */
  export type MovieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCountOutputType
     */
    select?: MovieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MovieCountOutputType without action
   */
  export type MovieCountOutputTypeCountRentedMoviesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentedMovieWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    Role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    Role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    Role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    Role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    Role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    Role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    Role: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    Role?: boolean
    RentedMovie?: boolean | User$RentedMovieArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    Role?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RentedMovie?: boolean | User$RentedMovieArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      RentedMovie: Prisma.$RentedMoviePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      Role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    RentedMovie<T extends User$RentedMovieArgs<ExtArgs> = {}>(args?: Subset<T, User$RentedMovieArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly Role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.RentedMovie
   */
  export type User$RentedMovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    where?: RentedMovieWhereInput
    orderBy?: RentedMovieOrderByWithRelationInput | RentedMovieOrderByWithRelationInput[]
    cursor?: RentedMovieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentedMovieScalarFieldEnum | RentedMovieScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Movie
   */

  export type AggregateMovie = {
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  export type MovieAvgAggregateOutputType = {
    duration: number | null
    releaseYear: number | null
  }

  export type MovieSumAggregateOutputType = {
    duration: number | null
    releaseYear: number | null
  }

  export type MovieMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    genre: string | null
    duration: number | null
    imageUrl: string | null
    releaseYear: number | null
    createdAt: Date | null
    updatedAt: Date | null
    picture: string | null
  }

  export type MovieMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    genre: string | null
    duration: number | null
    imageUrl: string | null
    releaseYear: number | null
    createdAt: Date | null
    updatedAt: Date | null
    picture: string | null
  }

  export type MovieCountAggregateOutputType = {
    id: number
    title: number
    description: number
    genre: number
    duration: number
    imageUrl: number
    rentalPrice: number
    releaseYear: number
    createdAt: number
    updatedAt: number
    picture: number
    _all: number
  }


  export type MovieAvgAggregateInputType = {
    duration?: true
    releaseYear?: true
  }

  export type MovieSumAggregateInputType = {
    duration?: true
    releaseYear?: true
  }

  export type MovieMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genre?: true
    duration?: true
    imageUrl?: true
    releaseYear?: true
    createdAt?: true
    updatedAt?: true
    picture?: true
  }

  export type MovieMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genre?: true
    duration?: true
    imageUrl?: true
    releaseYear?: true
    createdAt?: true
    updatedAt?: true
    picture?: true
  }

  export type MovieCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genre?: true
    duration?: true
    imageUrl?: true
    rentalPrice?: true
    releaseYear?: true
    createdAt?: true
    updatedAt?: true
    picture?: true
    _all?: true
  }

  export type MovieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movie to aggregate.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movies
    **/
    _count?: true | MovieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieMaxAggregateInputType
  }

  export type GetMovieAggregateType<T extends MovieAggregateArgs> = {
        [P in keyof T & keyof AggregateMovie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovie[P]>
      : GetScalarType<T[P], AggregateMovie[P]>
  }




  export type MovieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieWhereInput
    orderBy?: MovieOrderByWithAggregationInput | MovieOrderByWithAggregationInput[]
    by: MovieScalarFieldEnum[] | MovieScalarFieldEnum
    having?: MovieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCountAggregateInputType | true
    _avg?: MovieAvgAggregateInputType
    _sum?: MovieSumAggregateInputType
    _min?: MovieMinAggregateInputType
    _max?: MovieMaxAggregateInputType
  }

  export type MovieGroupByOutputType = {
    id: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl: string | null
    rentalPrice: JsonValue
    releaseYear: number
    createdAt: Date
    updatedAt: Date
    picture: string | null
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  type GetMovieGroupByPayload<T extends MovieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieGroupByOutputType[P]>
            : GetScalarType<T[P], MovieGroupByOutputType[P]>
        }
      >
    >


  export type MovieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    genre?: boolean
    duration?: boolean
    imageUrl?: boolean
    rentalPrice?: boolean
    releaseYear?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    picture?: boolean
    rentedMovies?: boolean | Movie$rentedMoviesArgs<ExtArgs>
    Pictures?: boolean | Movie$PicturesArgs<ExtArgs>
    _count?: boolean | MovieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movie"]>

  export type MovieSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    genre?: boolean
    duration?: boolean
    imageUrl?: boolean
    rentalPrice?: boolean
    releaseYear?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    picture?: boolean
  }


  export type MovieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rentedMovies?: boolean | Movie$rentedMoviesArgs<ExtArgs>
    Pictures?: boolean | Movie$PicturesArgs<ExtArgs>
    _count?: boolean | MovieCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MoviePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movie"
    objects: {
      rentedMovies: Prisma.$RentedMoviePayload<ExtArgs>[]
      Pictures: Prisma.$PicturesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      genre: string
      duration: number
      imageUrl: string | null
      rentalPrice: Prisma.JsonValue
      releaseYear: number
      createdAt: Date
      updatedAt: Date
      picture: string | null
    }, ExtArgs["result"]["movie"]>
    composites: {}
  }


  type MovieGetPayload<S extends boolean | null | undefined | MovieDefaultArgs> = $Result.GetResult<Prisma.$MoviePayload, S>

  type MovieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieCountAggregateInputType | true
    }

  export interface MovieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movie'], meta: { name: 'Movie' } }
    /**
     * Find zero or one Movie that matches the filter.
     * @param {MovieFindUniqueArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MovieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MovieFindUniqueArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Movie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieFindUniqueOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MovieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Movie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieFindFirstArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MovieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindFirstArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Movie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieFindFirstOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MovieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movie.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MovieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Movie.
     * @param {MovieCreateArgs} args - Arguments to create a Movie.
     * @example
     * // Create one Movie
     * const Movie = await prisma.movie.create({
     *   data: {
     *     // ... data to create a Movie
     *   }
     * })
     * 
    **/
    create<T extends MovieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MovieCreateArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Movies.
     * @param {MovieCreateManyArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movie = await prisma.movie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MovieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movies and returns the data saved in the database.
     * @param {MovieCreateManyAndReturnArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movie = await prisma.movie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movies and only return the `id`
     * const movieWithIdOnly = await prisma.movie.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MovieCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Movie.
     * @param {MovieDeleteArgs} args - Arguments to delete one Movie.
     * @example
     * // Delete one Movie
     * const Movie = await prisma.movie.delete({
     *   where: {
     *     // ... filter to delete one Movie
     *   }
     * })
     * 
    **/
    delete<T extends MovieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MovieDeleteArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Movie.
     * @param {MovieUpdateArgs} args - Arguments to update one Movie.
     * @example
     * // Update one Movie
     * const movie = await prisma.movie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MovieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MovieUpdateArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Movies.
     * @param {MovieDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MovieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movie = await prisma.movie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MovieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MovieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movie.
     * @param {MovieUpsertArgs} args - Arguments to update or create a Movie.
     * @example
     * // Update or create a Movie
     * const movie = await prisma.movie.upsert({
     *   create: {
     *     // ... data to create a Movie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movie we want to update
     *   }
     * })
    **/
    upsert<T extends MovieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MovieUpsertArgs<ExtArgs>>
    ): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movie.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends MovieCountArgs>(
      args?: Subset<T, MovieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieAggregateArgs>(args: Subset<T, MovieAggregateArgs>): Prisma.PrismaPromise<GetMovieAggregateType<T>>

    /**
     * Group by Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieGroupByArgs['orderBy'] }
        : { orderBy?: MovieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movie model
   */
  readonly fields: MovieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    rentedMovies<T extends Movie$rentedMoviesArgs<ExtArgs> = {}>(args?: Subset<T, Movie$rentedMoviesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findMany'> | Null>;

    Pictures<T extends Movie$PicturesArgs<ExtArgs> = {}>(args?: Subset<T, Movie$PicturesArgs<ExtArgs>>): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Movie model
   */ 
  interface MovieFieldRefs {
    readonly id: FieldRef<"Movie", 'String'>
    readonly title: FieldRef<"Movie", 'String'>
    readonly description: FieldRef<"Movie", 'String'>
    readonly genre: FieldRef<"Movie", 'String'>
    readonly duration: FieldRef<"Movie", 'Int'>
    readonly imageUrl: FieldRef<"Movie", 'String'>
    readonly rentalPrice: FieldRef<"Movie", 'Json'>
    readonly releaseYear: FieldRef<"Movie", 'Int'>
    readonly createdAt: FieldRef<"Movie", 'DateTime'>
    readonly updatedAt: FieldRef<"Movie", 'DateTime'>
    readonly picture: FieldRef<"Movie", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Movie findUnique
   */
  export type MovieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie findUniqueOrThrow
   */
  export type MovieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie findFirst
   */
  export type MovieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * Movie findFirstOrThrow
   */
  export type MovieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * Filter, which Movie to fetch.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * Movie findMany
   */
  export type MovieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MovieOrderByWithRelationInput | MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movies.
     */
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    distinct?: MovieScalarFieldEnum | MovieScalarFieldEnum[]
  }

  /**
   * Movie create
   */
  export type MovieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * The data needed to create a Movie.
     */
    data: XOR<MovieCreateInput, MovieUncheckedCreateInput>
  }

  /**
   * Movie createMany
   */
  export type MovieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movies.
     */
    data: MovieCreateManyInput | MovieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movie createManyAndReturn
   */
  export type MovieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * The data used to create many Movies.
     */
    data: MovieCreateManyInput | MovieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movie update
   */
  export type MovieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * The data needed to update a Movie.
     */
    data: XOR<MovieUpdateInput, MovieUncheckedUpdateInput>
    /**
     * Choose, which Movie to update.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie updateMany
   */
  export type MovieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movies.
     */
    data: XOR<MovieUpdateManyMutationInput, MovieUncheckedUpdateManyInput>
    /**
     * Filter which Movies to update
     */
    where?: MovieWhereInput
  }

  /**
   * Movie upsert
   */
  export type MovieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * The filter to search for the Movie to update in case it exists.
     */
    where: MovieWhereUniqueInput
    /**
     * In case the Movie found by the `where` argument doesn't exist, create a new Movie with this data.
     */
    create: XOR<MovieCreateInput, MovieUncheckedCreateInput>
    /**
     * In case the Movie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieUpdateInput, MovieUncheckedUpdateInput>
  }

  /**
   * Movie delete
   */
  export type MovieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    /**
     * Filter which Movie to delete.
     */
    where: MovieWhereUniqueInput
  }

  /**
   * Movie deleteMany
   */
  export type MovieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movies to delete
     */
    where?: MovieWhereInput
  }

  /**
   * Movie.rentedMovies
   */
  export type Movie$rentedMoviesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    where?: RentedMovieWhereInput
    orderBy?: RentedMovieOrderByWithRelationInput | RentedMovieOrderByWithRelationInput[]
    cursor?: RentedMovieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentedMovieScalarFieldEnum | RentedMovieScalarFieldEnum[]
  }

  /**
   * Movie.Pictures
   */
  export type Movie$PicturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    where?: PicturesWhereInput
  }

  /**
   * Movie without action
   */
  export type MovieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
  }


  /**
   * Model RentedMovie
   */

  export type AggregateRentedMovie = {
    _count: RentedMovieCountAggregateOutputType | null
    _min: RentedMovieMinAggregateOutputType | null
    _max: RentedMovieMaxAggregateOutputType | null
  }

  export type RentedMovieMinAggregateOutputType = {
    userId: string | null
    movieId: string | null
    rentalEndDate: Date | null
  }

  export type RentedMovieMaxAggregateOutputType = {
    userId: string | null
    movieId: string | null
    rentalEndDate: Date | null
  }

  export type RentedMovieCountAggregateOutputType = {
    userId: number
    movieId: number
    rentalEndDate: number
    _all: number
  }


  export type RentedMovieMinAggregateInputType = {
    userId?: true
    movieId?: true
    rentalEndDate?: true
  }

  export type RentedMovieMaxAggregateInputType = {
    userId?: true
    movieId?: true
    rentalEndDate?: true
  }

  export type RentedMovieCountAggregateInputType = {
    userId?: true
    movieId?: true
    rentalEndDate?: true
    _all?: true
  }

  export type RentedMovieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentedMovie to aggregate.
     */
    where?: RentedMovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentedMovies to fetch.
     */
    orderBy?: RentedMovieOrderByWithRelationInput | RentedMovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentedMovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentedMovies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentedMovies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RentedMovies
    **/
    _count?: true | RentedMovieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentedMovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentedMovieMaxAggregateInputType
  }

  export type GetRentedMovieAggregateType<T extends RentedMovieAggregateArgs> = {
        [P in keyof T & keyof AggregateRentedMovie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRentedMovie[P]>
      : GetScalarType<T[P], AggregateRentedMovie[P]>
  }




  export type RentedMovieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentedMovieWhereInput
    orderBy?: RentedMovieOrderByWithAggregationInput | RentedMovieOrderByWithAggregationInput[]
    by: RentedMovieScalarFieldEnum[] | RentedMovieScalarFieldEnum
    having?: RentedMovieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentedMovieCountAggregateInputType | true
    _min?: RentedMovieMinAggregateInputType
    _max?: RentedMovieMaxAggregateInputType
  }

  export type RentedMovieGroupByOutputType = {
    userId: string
    movieId: string
    rentalEndDate: Date | null
    _count: RentedMovieCountAggregateOutputType | null
    _min: RentedMovieMinAggregateOutputType | null
    _max: RentedMovieMaxAggregateOutputType | null
  }

  type GetRentedMovieGroupByPayload<T extends RentedMovieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentedMovieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentedMovieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentedMovieGroupByOutputType[P]>
            : GetScalarType<T[P], RentedMovieGroupByOutputType[P]>
        }
      >
    >


  export type RentedMovieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    movieId?: boolean
    rentalEndDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    movie?: boolean | MovieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rentedMovie"]>

  export type RentedMovieSelectScalar = {
    userId?: boolean
    movieId?: boolean
    rentalEndDate?: boolean
  }


  export type RentedMovieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    movie?: boolean | MovieDefaultArgs<ExtArgs>
  }


  export type $RentedMoviePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RentedMovie"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      movie: Prisma.$MoviePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      movieId: string
      rentalEndDate: Date | null
    }, ExtArgs["result"]["rentedMovie"]>
    composites: {}
  }


  type RentedMovieGetPayload<S extends boolean | null | undefined | RentedMovieDefaultArgs> = $Result.GetResult<Prisma.$RentedMoviePayload, S>

  type RentedMovieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RentedMovieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RentedMovieCountAggregateInputType | true
    }

  export interface RentedMovieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RentedMovie'], meta: { name: 'RentedMovie' } }
    /**
     * Find zero or one RentedMovie that matches the filter.
     * @param {RentedMovieFindUniqueArgs} args - Arguments to find a RentedMovie
     * @example
     * // Get one RentedMovie
     * const rentedMovie = await prisma.rentedMovie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentedMovieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RentedMovieFindUniqueArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RentedMovie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RentedMovieFindUniqueOrThrowArgs} args - Arguments to find a RentedMovie
     * @example
     * // Get one RentedMovie
     * const rentedMovie = await prisma.rentedMovie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentedMovieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RentedMovie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieFindFirstArgs} args - Arguments to find a RentedMovie
     * @example
     * // Get one RentedMovie
     * const rentedMovie = await prisma.rentedMovie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentedMovieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieFindFirstArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RentedMovie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieFindFirstOrThrowArgs} args - Arguments to find a RentedMovie
     * @example
     * // Get one RentedMovie
     * const rentedMovie = await prisma.rentedMovie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentedMovieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RentedMovies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RentedMovies
     * const rentedMovies = await prisma.rentedMovie.findMany()
     * 
     * // Get first 10 RentedMovies
     * const rentedMovies = await prisma.rentedMovie.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const rentedMovieWithUserIdOnly = await prisma.rentedMovie.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends RentedMovieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RentedMovie.
     * @param {RentedMovieCreateArgs} args - Arguments to create a RentedMovie.
     * @example
     * // Create one RentedMovie
     * const RentedMovie = await prisma.rentedMovie.create({
     *   data: {
     *     // ... data to create a RentedMovie
     *   }
     * })
     * 
    **/
    create<T extends RentedMovieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RentedMovieCreateArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RentedMovies.
     * @param {RentedMovieCreateManyArgs} args - Arguments to create many RentedMovies.
     * @example
     * // Create many RentedMovies
     * const rentedMovie = await prisma.rentedMovie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RentedMovieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RentedMovies and returns the data saved in the database.
     * @param {RentedMovieCreateManyAndReturnArgs} args - Arguments to create many RentedMovies.
     * @example
     * // Create many RentedMovies
     * const rentedMovie = await prisma.rentedMovie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RentedMovies and only return the `userId`
     * const rentedMovieWithUserIdOnly = await prisma.rentedMovie.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RentedMovieCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a RentedMovie.
     * @param {RentedMovieDeleteArgs} args - Arguments to delete one RentedMovie.
     * @example
     * // Delete one RentedMovie
     * const RentedMovie = await prisma.rentedMovie.delete({
     *   where: {
     *     // ... filter to delete one RentedMovie
     *   }
     * })
     * 
    **/
    delete<T extends RentedMovieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RentedMovieDeleteArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RentedMovie.
     * @param {RentedMovieUpdateArgs} args - Arguments to update one RentedMovie.
     * @example
     * // Update one RentedMovie
     * const rentedMovie = await prisma.rentedMovie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentedMovieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RentedMovieUpdateArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RentedMovies.
     * @param {RentedMovieDeleteManyArgs} args - Arguments to filter RentedMovies to delete.
     * @example
     * // Delete a few RentedMovies
     * const { count } = await prisma.rentedMovie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentedMovieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentedMovieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RentedMovies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RentedMovies
     * const rentedMovie = await prisma.rentedMovie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentedMovieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RentedMovieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RentedMovie.
     * @param {RentedMovieUpsertArgs} args - Arguments to update or create a RentedMovie.
     * @example
     * // Update or create a RentedMovie
     * const rentedMovie = await prisma.rentedMovie.upsert({
     *   create: {
     *     // ... data to create a RentedMovie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RentedMovie we want to update
     *   }
     * })
    **/
    upsert<T extends RentedMovieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RentedMovieUpsertArgs<ExtArgs>>
    ): Prisma__RentedMovieClient<$Result.GetResult<Prisma.$RentedMoviePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RentedMovies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieCountArgs} args - Arguments to filter RentedMovies to count.
     * @example
     * // Count the number of RentedMovies
     * const count = await prisma.rentedMovie.count({
     *   where: {
     *     // ... the filter for the RentedMovies we want to count
     *   }
     * })
    **/
    count<T extends RentedMovieCountArgs>(
      args?: Subset<T, RentedMovieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentedMovieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RentedMovie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentedMovieAggregateArgs>(args: Subset<T, RentedMovieAggregateArgs>): Prisma.PrismaPromise<GetRentedMovieAggregateType<T>>

    /**
     * Group by RentedMovie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentedMovieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentedMovieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentedMovieGroupByArgs['orderBy'] }
        : { orderBy?: RentedMovieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentedMovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentedMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RentedMovie model
   */
  readonly fields: RentedMovieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RentedMovie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentedMovieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    movie<T extends MovieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MovieDefaultArgs<ExtArgs>>): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RentedMovie model
   */ 
  interface RentedMovieFieldRefs {
    readonly userId: FieldRef<"RentedMovie", 'String'>
    readonly movieId: FieldRef<"RentedMovie", 'String'>
    readonly rentalEndDate: FieldRef<"RentedMovie", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RentedMovie findUnique
   */
  export type RentedMovieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * Filter, which RentedMovie to fetch.
     */
    where: RentedMovieWhereUniqueInput
  }

  /**
   * RentedMovie findUniqueOrThrow
   */
  export type RentedMovieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * Filter, which RentedMovie to fetch.
     */
    where: RentedMovieWhereUniqueInput
  }

  /**
   * RentedMovie findFirst
   */
  export type RentedMovieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * Filter, which RentedMovie to fetch.
     */
    where?: RentedMovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentedMovies to fetch.
     */
    orderBy?: RentedMovieOrderByWithRelationInput | RentedMovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentedMovies.
     */
    cursor?: RentedMovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentedMovies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentedMovies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentedMovies.
     */
    distinct?: RentedMovieScalarFieldEnum | RentedMovieScalarFieldEnum[]
  }

  /**
   * RentedMovie findFirstOrThrow
   */
  export type RentedMovieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * Filter, which RentedMovie to fetch.
     */
    where?: RentedMovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentedMovies to fetch.
     */
    orderBy?: RentedMovieOrderByWithRelationInput | RentedMovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentedMovies.
     */
    cursor?: RentedMovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentedMovies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentedMovies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentedMovies.
     */
    distinct?: RentedMovieScalarFieldEnum | RentedMovieScalarFieldEnum[]
  }

  /**
   * RentedMovie findMany
   */
  export type RentedMovieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * Filter, which RentedMovies to fetch.
     */
    where?: RentedMovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentedMovies to fetch.
     */
    orderBy?: RentedMovieOrderByWithRelationInput | RentedMovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RentedMovies.
     */
    cursor?: RentedMovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentedMovies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentedMovies.
     */
    skip?: number
    distinct?: RentedMovieScalarFieldEnum | RentedMovieScalarFieldEnum[]
  }

  /**
   * RentedMovie create
   */
  export type RentedMovieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * The data needed to create a RentedMovie.
     */
    data: XOR<RentedMovieCreateInput, RentedMovieUncheckedCreateInput>
  }

  /**
   * RentedMovie createMany
   */
  export type RentedMovieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RentedMovies.
     */
    data: RentedMovieCreateManyInput | RentedMovieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RentedMovie createManyAndReturn
   */
  export type RentedMovieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * The data used to create many RentedMovies.
     */
    data: RentedMovieCreateManyInput | RentedMovieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RentedMovie update
   */
  export type RentedMovieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * The data needed to update a RentedMovie.
     */
    data: XOR<RentedMovieUpdateInput, RentedMovieUncheckedUpdateInput>
    /**
     * Choose, which RentedMovie to update.
     */
    where: RentedMovieWhereUniqueInput
  }

  /**
   * RentedMovie updateMany
   */
  export type RentedMovieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RentedMovies.
     */
    data: XOR<RentedMovieUpdateManyMutationInput, RentedMovieUncheckedUpdateManyInput>
    /**
     * Filter which RentedMovies to update
     */
    where?: RentedMovieWhereInput
  }

  /**
   * RentedMovie upsert
   */
  export type RentedMovieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * The filter to search for the RentedMovie to update in case it exists.
     */
    where: RentedMovieWhereUniqueInput
    /**
     * In case the RentedMovie found by the `where` argument doesn't exist, create a new RentedMovie with this data.
     */
    create: XOR<RentedMovieCreateInput, RentedMovieUncheckedCreateInput>
    /**
     * In case the RentedMovie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentedMovieUpdateInput, RentedMovieUncheckedUpdateInput>
  }

  /**
   * RentedMovie delete
   */
  export type RentedMovieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
    /**
     * Filter which RentedMovie to delete.
     */
    where: RentedMovieWhereUniqueInput
  }

  /**
   * RentedMovie deleteMany
   */
  export type RentedMovieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentedMovies to delete
     */
    where?: RentedMovieWhereInput
  }

  /**
   * RentedMovie without action
   */
  export type RentedMovieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentedMovie
     */
    select?: RentedMovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentedMovieInclude<ExtArgs> | null
  }


  /**
   * Model Pictures
   */

  export type AggregatePictures = {
    _count: PicturesCountAggregateOutputType | null
    _min: PicturesMinAggregateOutputType | null
    _max: PicturesMaxAggregateOutputType | null
  }

  export type PicturesMinAggregateOutputType = {
    id: string | null
    path: string | null
    url: string | null
    uploadDate: Date | null
    tags: string | null
    description: string | null
    visibility: boolean | null
  }

  export type PicturesMaxAggregateOutputType = {
    id: string | null
    path: string | null
    url: string | null
    uploadDate: Date | null
    tags: string | null
    description: string | null
    visibility: boolean | null
  }

  export type PicturesCountAggregateOutputType = {
    id: number
    path: number
    url: number
    uploadDate: number
    tags: number
    description: number
    visibility: number
    _all: number
  }


  export type PicturesMinAggregateInputType = {
    id?: true
    path?: true
    url?: true
    uploadDate?: true
    tags?: true
    description?: true
    visibility?: true
  }

  export type PicturesMaxAggregateInputType = {
    id?: true
    path?: true
    url?: true
    uploadDate?: true
    tags?: true
    description?: true
    visibility?: true
  }

  export type PicturesCountAggregateInputType = {
    id?: true
    path?: true
    url?: true
    uploadDate?: true
    tags?: true
    description?: true
    visibility?: true
    _all?: true
  }

  export type PicturesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pictures to aggregate.
     */
    where?: PicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pictures to fetch.
     */
    orderBy?: PicturesOrderByWithRelationInput | PicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pictures
    **/
    _count?: true | PicturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PicturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PicturesMaxAggregateInputType
  }

  export type GetPicturesAggregateType<T extends PicturesAggregateArgs> = {
        [P in keyof T & keyof AggregatePictures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePictures[P]>
      : GetScalarType<T[P], AggregatePictures[P]>
  }




  export type PicturesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PicturesWhereInput
    orderBy?: PicturesOrderByWithAggregationInput | PicturesOrderByWithAggregationInput[]
    by: PicturesScalarFieldEnum[] | PicturesScalarFieldEnum
    having?: PicturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PicturesCountAggregateInputType | true
    _min?: PicturesMinAggregateInputType
    _max?: PicturesMaxAggregateInputType
  }

  export type PicturesGroupByOutputType = {
    id: string
    path: string
    url: string
    uploadDate: Date
    tags: string | null
    description: string | null
    visibility: boolean
    _count: PicturesCountAggregateOutputType | null
    _min: PicturesMinAggregateOutputType | null
    _max: PicturesMaxAggregateOutputType | null
  }

  type GetPicturesGroupByPayload<T extends PicturesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PicturesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PicturesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PicturesGroupByOutputType[P]>
            : GetScalarType<T[P], PicturesGroupByOutputType[P]>
        }
      >
    >


  export type PicturesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    url?: boolean
    uploadDate?: boolean
    tags?: boolean
    description?: boolean
    visibility?: boolean
    movie?: boolean | Pictures$movieArgs<ExtArgs>
  }, ExtArgs["result"]["pictures"]>

  export type PicturesSelectScalar = {
    id?: boolean
    path?: boolean
    url?: boolean
    uploadDate?: boolean
    tags?: boolean
    description?: boolean
    visibility?: boolean
  }


  export type PicturesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movie?: boolean | Pictures$movieArgs<ExtArgs>
  }


  export type $PicturesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pictures"
    objects: {
      movie: Prisma.$MoviePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      path: string
      url: string
      uploadDate: Date
      tags: string | null
      description: string | null
      visibility: boolean
    }, ExtArgs["result"]["pictures"]>
    composites: {}
  }


  type PicturesGetPayload<S extends boolean | null | undefined | PicturesDefaultArgs> = $Result.GetResult<Prisma.$PicturesPayload, S>

  type PicturesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PicturesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PicturesCountAggregateInputType | true
    }

  export interface PicturesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pictures'], meta: { name: 'Pictures' } }
    /**
     * Find zero or one Pictures that matches the filter.
     * @param {PicturesFindUniqueArgs} args - Arguments to find a Pictures
     * @example
     * // Get one Pictures
     * const pictures = await prisma.pictures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PicturesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PicturesFindUniqueArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pictures that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PicturesFindUniqueOrThrowArgs} args - Arguments to find a Pictures
     * @example
     * // Get one Pictures
     * const pictures = await prisma.pictures.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PicturesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesFindFirstArgs} args - Arguments to find a Pictures
     * @example
     * // Get one Pictures
     * const pictures = await prisma.pictures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PicturesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesFindFirstArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pictures that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesFindFirstOrThrowArgs} args - Arguments to find a Pictures
     * @example
     * // Get one Pictures
     * const pictures = await prisma.pictures.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PicturesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pictures
     * const pictures = await prisma.pictures.findMany()
     * 
     * // Get first 10 Pictures
     * const pictures = await prisma.pictures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const picturesWithIdOnly = await prisma.pictures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PicturesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pictures.
     * @param {PicturesCreateArgs} args - Arguments to create a Pictures.
     * @example
     * // Create one Pictures
     * const Pictures = await prisma.pictures.create({
     *   data: {
     *     // ... data to create a Pictures
     *   }
     * })
     * 
    **/
    create<T extends PicturesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PicturesCreateArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pictures.
     * @param {PicturesCreateManyArgs} args - Arguments to create many Pictures.
     * @example
     * // Create many Pictures
     * const pictures = await prisma.pictures.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PicturesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pictures and returns the data saved in the database.
     * @param {PicturesCreateManyAndReturnArgs} args - Arguments to create many Pictures.
     * @example
     * // Create many Pictures
     * const pictures = await prisma.pictures.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pictures and only return the `id`
     * const picturesWithIdOnly = await prisma.pictures.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PicturesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Pictures.
     * @param {PicturesDeleteArgs} args - Arguments to delete one Pictures.
     * @example
     * // Delete one Pictures
     * const Pictures = await prisma.pictures.delete({
     *   where: {
     *     // ... filter to delete one Pictures
     *   }
     * })
     * 
    **/
    delete<T extends PicturesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PicturesDeleteArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pictures.
     * @param {PicturesUpdateArgs} args - Arguments to update one Pictures.
     * @example
     * // Update one Pictures
     * const pictures = await prisma.pictures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PicturesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PicturesUpdateArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pictures.
     * @param {PicturesDeleteManyArgs} args - Arguments to filter Pictures to delete.
     * @example
     * // Delete a few Pictures
     * const { count } = await prisma.pictures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PicturesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PicturesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pictures
     * const pictures = await prisma.pictures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PicturesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PicturesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pictures.
     * @param {PicturesUpsertArgs} args - Arguments to update or create a Pictures.
     * @example
     * // Update or create a Pictures
     * const pictures = await prisma.pictures.upsert({
     *   create: {
     *     // ... data to create a Pictures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pictures we want to update
     *   }
     * })
    **/
    upsert<T extends PicturesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PicturesUpsertArgs<ExtArgs>>
    ): Prisma__PicturesClient<$Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesCountArgs} args - Arguments to filter Pictures to count.
     * @example
     * // Count the number of Pictures
     * const count = await prisma.pictures.count({
     *   where: {
     *     // ... the filter for the Pictures we want to count
     *   }
     * })
    **/
    count<T extends PicturesCountArgs>(
      args?: Subset<T, PicturesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PicturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PicturesAggregateArgs>(args: Subset<T, PicturesAggregateArgs>): Prisma.PrismaPromise<GetPicturesAggregateType<T>>

    /**
     * Group by Pictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PicturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PicturesGroupByArgs['orderBy'] }
        : { orderBy?: PicturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PicturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPicturesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pictures model
   */
  readonly fields: PicturesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pictures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PicturesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    movie<T extends Pictures$movieArgs<ExtArgs> = {}>(args?: Subset<T, Pictures$movieArgs<ExtArgs>>): Prisma__MovieClient<$Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pictures model
   */ 
  interface PicturesFieldRefs {
    readonly id: FieldRef<"Pictures", 'String'>
    readonly path: FieldRef<"Pictures", 'String'>
    readonly url: FieldRef<"Pictures", 'String'>
    readonly uploadDate: FieldRef<"Pictures", 'DateTime'>
    readonly tags: FieldRef<"Pictures", 'String'>
    readonly description: FieldRef<"Pictures", 'String'>
    readonly visibility: FieldRef<"Pictures", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Pictures findUnique
   */
  export type PicturesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * Filter, which Pictures to fetch.
     */
    where: PicturesWhereUniqueInput
  }

  /**
   * Pictures findUniqueOrThrow
   */
  export type PicturesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * Filter, which Pictures to fetch.
     */
    where: PicturesWhereUniqueInput
  }

  /**
   * Pictures findFirst
   */
  export type PicturesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * Filter, which Pictures to fetch.
     */
    where?: PicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pictures to fetch.
     */
    orderBy?: PicturesOrderByWithRelationInput | PicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pictures.
     */
    cursor?: PicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pictures.
     */
    distinct?: PicturesScalarFieldEnum | PicturesScalarFieldEnum[]
  }

  /**
   * Pictures findFirstOrThrow
   */
  export type PicturesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * Filter, which Pictures to fetch.
     */
    where?: PicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pictures to fetch.
     */
    orderBy?: PicturesOrderByWithRelationInput | PicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pictures.
     */
    cursor?: PicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pictures.
     */
    distinct?: PicturesScalarFieldEnum | PicturesScalarFieldEnum[]
  }

  /**
   * Pictures findMany
   */
  export type PicturesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * Filter, which Pictures to fetch.
     */
    where?: PicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pictures to fetch.
     */
    orderBy?: PicturesOrderByWithRelationInput | PicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pictures.
     */
    cursor?: PicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pictures.
     */
    skip?: number
    distinct?: PicturesScalarFieldEnum | PicturesScalarFieldEnum[]
  }

  /**
   * Pictures create
   */
  export type PicturesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * The data needed to create a Pictures.
     */
    data: XOR<PicturesCreateInput, PicturesUncheckedCreateInput>
  }

  /**
   * Pictures createMany
   */
  export type PicturesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pictures.
     */
    data: PicturesCreateManyInput | PicturesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pictures createManyAndReturn
   */
  export type PicturesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * The data used to create many Pictures.
     */
    data: PicturesCreateManyInput | PicturesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pictures update
   */
  export type PicturesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * The data needed to update a Pictures.
     */
    data: XOR<PicturesUpdateInput, PicturesUncheckedUpdateInput>
    /**
     * Choose, which Pictures to update.
     */
    where: PicturesWhereUniqueInput
  }

  /**
   * Pictures updateMany
   */
  export type PicturesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pictures.
     */
    data: XOR<PicturesUpdateManyMutationInput, PicturesUncheckedUpdateManyInput>
    /**
     * Filter which Pictures to update
     */
    where?: PicturesWhereInput
  }

  /**
   * Pictures upsert
   */
  export type PicturesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * The filter to search for the Pictures to update in case it exists.
     */
    where: PicturesWhereUniqueInput
    /**
     * In case the Pictures found by the `where` argument doesn't exist, create a new Pictures with this data.
     */
    create: XOR<PicturesCreateInput, PicturesUncheckedCreateInput>
    /**
     * In case the Pictures was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PicturesUpdateInput, PicturesUncheckedUpdateInput>
  }

  /**
   * Pictures delete
   */
  export type PicturesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
    /**
     * Filter which Pictures to delete.
     */
    where: PicturesWhereUniqueInput
  }

  /**
   * Pictures deleteMany
   */
  export type PicturesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pictures to delete
     */
    where?: PicturesWhereInput
  }

  /**
   * Pictures.movie
   */
  export type Pictures$movieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movie
     */
    select?: MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieInclude<ExtArgs> | null
    where?: MovieWhereInput
  }

  /**
   * Pictures without action
   */
  export type PicturesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pictures
     */
    select?: PicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicturesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    Role: 'Role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MovieScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    genre: 'genre',
    duration: 'duration',
    imageUrl: 'imageUrl',
    rentalPrice: 'rentalPrice',
    releaseYear: 'releaseYear',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    picture: 'picture'
  };

  export type MovieScalarFieldEnum = (typeof MovieScalarFieldEnum)[keyof typeof MovieScalarFieldEnum]


  export const RentedMovieScalarFieldEnum: {
    userId: 'userId',
    movieId: 'movieId',
    rentalEndDate: 'rentalEndDate'
  };

  export type RentedMovieScalarFieldEnum = (typeof RentedMovieScalarFieldEnum)[keyof typeof RentedMovieScalarFieldEnum]


  export const PicturesScalarFieldEnum: {
    id: 'id',
    path: 'path',
    url: 'url',
    uploadDate: 'uploadDate',
    tags: 'tags',
    description: 'description',
    visibility: 'visibility'
  };

  export type PicturesScalarFieldEnum = (typeof PicturesScalarFieldEnum)[keyof typeof PicturesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    Role?: StringFilter<"User"> | string
    RentedMovie?: RentedMovieListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    Role?: SortOrder
    RentedMovie?: RentedMovieOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    Role?: StringFilter<"User"> | string
    RentedMovie?: RentedMovieListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    Role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    Role?: StringWithAggregatesFilter<"User"> | string
  }

  export type MovieWhereInput = {
    AND?: MovieWhereInput | MovieWhereInput[]
    OR?: MovieWhereInput[]
    NOT?: MovieWhereInput | MovieWhereInput[]
    id?: UuidFilter<"Movie"> | string
    title?: StringFilter<"Movie"> | string
    description?: StringFilter<"Movie"> | string
    genre?: StringFilter<"Movie"> | string
    duration?: IntFilter<"Movie"> | number
    imageUrl?: StringNullableFilter<"Movie"> | string | null
    rentalPrice?: JsonFilter<"Movie">
    releaseYear?: IntFilter<"Movie"> | number
    createdAt?: DateTimeFilter<"Movie"> | Date | string
    updatedAt?: DateTimeFilter<"Movie"> | Date | string
    picture?: StringNullableFilter<"Movie"> | string | null
    rentedMovies?: RentedMovieListRelationFilter
    Pictures?: XOR<PicturesNullableRelationFilter, PicturesWhereInput> | null
  }

  export type MovieOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    rentalPrice?: SortOrder
    releaseYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrderInput | SortOrder
    rentedMovies?: RentedMovieOrderByRelationAggregateInput
    Pictures?: PicturesOrderByWithRelationInput
  }

  export type MovieWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    imageUrl?: string
    AND?: MovieWhereInput | MovieWhereInput[]
    OR?: MovieWhereInput[]
    NOT?: MovieWhereInput | MovieWhereInput[]
    title?: StringFilter<"Movie"> | string
    description?: StringFilter<"Movie"> | string
    genre?: StringFilter<"Movie"> | string
    duration?: IntFilter<"Movie"> | number
    rentalPrice?: JsonFilter<"Movie">
    releaseYear?: IntFilter<"Movie"> | number
    createdAt?: DateTimeFilter<"Movie"> | Date | string
    updatedAt?: DateTimeFilter<"Movie"> | Date | string
    picture?: StringNullableFilter<"Movie"> | string | null
    rentedMovies?: RentedMovieListRelationFilter
    Pictures?: XOR<PicturesNullableRelationFilter, PicturesWhereInput> | null
  }, "id" | "imageUrl">

  export type MovieOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    rentalPrice?: SortOrder
    releaseYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrderInput | SortOrder
    _count?: MovieCountOrderByAggregateInput
    _avg?: MovieAvgOrderByAggregateInput
    _max?: MovieMaxOrderByAggregateInput
    _min?: MovieMinOrderByAggregateInput
    _sum?: MovieSumOrderByAggregateInput
  }

  export type MovieScalarWhereWithAggregatesInput = {
    AND?: MovieScalarWhereWithAggregatesInput | MovieScalarWhereWithAggregatesInput[]
    OR?: MovieScalarWhereWithAggregatesInput[]
    NOT?: MovieScalarWhereWithAggregatesInput | MovieScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Movie"> | string
    title?: StringWithAggregatesFilter<"Movie"> | string
    description?: StringWithAggregatesFilter<"Movie"> | string
    genre?: StringWithAggregatesFilter<"Movie"> | string
    duration?: IntWithAggregatesFilter<"Movie"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Movie"> | string | null
    rentalPrice?: JsonWithAggregatesFilter<"Movie">
    releaseYear?: IntWithAggregatesFilter<"Movie"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Movie"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Movie"> | Date | string
    picture?: StringNullableWithAggregatesFilter<"Movie"> | string | null
  }

  export type RentedMovieWhereInput = {
    AND?: RentedMovieWhereInput | RentedMovieWhereInput[]
    OR?: RentedMovieWhereInput[]
    NOT?: RentedMovieWhereInput | RentedMovieWhereInput[]
    userId?: UuidFilter<"RentedMovie"> | string
    movieId?: UuidFilter<"RentedMovie"> | string
    rentalEndDate?: DateTimeNullableFilter<"RentedMovie"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    movie?: XOR<MovieRelationFilter, MovieWhereInput>
  }

  export type RentedMovieOrderByWithRelationInput = {
    userId?: SortOrder
    movieId?: SortOrder
    rentalEndDate?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    movie?: MovieOrderByWithRelationInput
  }

  export type RentedMovieWhereUniqueInput = Prisma.AtLeast<{
    userId_movieId?: RentedMovieUserIdMovieIdCompoundUniqueInput
    AND?: RentedMovieWhereInput | RentedMovieWhereInput[]
    OR?: RentedMovieWhereInput[]
    NOT?: RentedMovieWhereInput | RentedMovieWhereInput[]
    userId?: UuidFilter<"RentedMovie"> | string
    movieId?: UuidFilter<"RentedMovie"> | string
    rentalEndDate?: DateTimeNullableFilter<"RentedMovie"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    movie?: XOR<MovieRelationFilter, MovieWhereInput>
  }, "userId_movieId">

  export type RentedMovieOrderByWithAggregationInput = {
    userId?: SortOrder
    movieId?: SortOrder
    rentalEndDate?: SortOrderInput | SortOrder
    _count?: RentedMovieCountOrderByAggregateInput
    _max?: RentedMovieMaxOrderByAggregateInput
    _min?: RentedMovieMinOrderByAggregateInput
  }

  export type RentedMovieScalarWhereWithAggregatesInput = {
    AND?: RentedMovieScalarWhereWithAggregatesInput | RentedMovieScalarWhereWithAggregatesInput[]
    OR?: RentedMovieScalarWhereWithAggregatesInput[]
    NOT?: RentedMovieScalarWhereWithAggregatesInput | RentedMovieScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"RentedMovie"> | string
    movieId?: UuidWithAggregatesFilter<"RentedMovie"> | string
    rentalEndDate?: DateTimeNullableWithAggregatesFilter<"RentedMovie"> | Date | string | null
  }

  export type PicturesWhereInput = {
    AND?: PicturesWhereInput | PicturesWhereInput[]
    OR?: PicturesWhereInput[]
    NOT?: PicturesWhereInput | PicturesWhereInput[]
    id?: StringFilter<"Pictures"> | string
    path?: StringFilter<"Pictures"> | string
    url?: StringFilter<"Pictures"> | string
    uploadDate?: DateTimeFilter<"Pictures"> | Date | string
    tags?: StringNullableFilter<"Pictures"> | string | null
    description?: StringNullableFilter<"Pictures"> | string | null
    visibility?: BoolFilter<"Pictures"> | boolean
    movie?: XOR<MovieNullableRelationFilter, MovieWhereInput> | null
  }

  export type PicturesOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    url?: SortOrder
    uploadDate?: SortOrder
    tags?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    visibility?: SortOrder
    movie?: MovieOrderByWithRelationInput
  }

  export type PicturesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    url?: string
    AND?: PicturesWhereInput | PicturesWhereInput[]
    OR?: PicturesWhereInput[]
    NOT?: PicturesWhereInput | PicturesWhereInput[]
    path?: StringFilter<"Pictures"> | string
    uploadDate?: DateTimeFilter<"Pictures"> | Date | string
    tags?: StringNullableFilter<"Pictures"> | string | null
    description?: StringNullableFilter<"Pictures"> | string | null
    visibility?: BoolFilter<"Pictures"> | boolean
    movie?: XOR<MovieNullableRelationFilter, MovieWhereInput> | null
  }, "id" | "url">

  export type PicturesOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    url?: SortOrder
    uploadDate?: SortOrder
    tags?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    visibility?: SortOrder
    _count?: PicturesCountOrderByAggregateInput
    _max?: PicturesMaxOrderByAggregateInput
    _min?: PicturesMinOrderByAggregateInput
  }

  export type PicturesScalarWhereWithAggregatesInput = {
    AND?: PicturesScalarWhereWithAggregatesInput | PicturesScalarWhereWithAggregatesInput[]
    OR?: PicturesScalarWhereWithAggregatesInput[]
    NOT?: PicturesScalarWhereWithAggregatesInput | PicturesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pictures"> | string
    path?: StringWithAggregatesFilter<"Pictures"> | string
    url?: StringWithAggregatesFilter<"Pictures"> | string
    uploadDate?: DateTimeWithAggregatesFilter<"Pictures"> | Date | string
    tags?: StringNullableWithAggregatesFilter<"Pictures"> | string | null
    description?: StringNullableWithAggregatesFilter<"Pictures"> | string | null
    visibility?: BoolWithAggregatesFilter<"Pictures"> | boolean
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    Role: string
    RentedMovie?: RentedMovieCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    Role: string
    RentedMovie?: RentedMovieUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    RentedMovie?: RentedMovieUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    RentedMovie?: RentedMovieUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    Role: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
  }

  export type MovieCreateInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    rentedMovies?: RentedMovieCreateNestedManyWithoutMovieInput
    Pictures?: PicturesCreateNestedOneWithoutMovieInput
  }

  export type MovieUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    rentedMovies?: RentedMovieUncheckedCreateNestedManyWithoutMovieInput
    Pictures?: PicturesUncheckedCreateNestedOneWithoutMovieInput
  }

  export type MovieUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    rentedMovies?: RentedMovieUpdateManyWithoutMovieNestedInput
    Pictures?: PicturesUpdateOneWithoutMovieNestedInput
  }

  export type MovieUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    rentedMovies?: RentedMovieUncheckedUpdateManyWithoutMovieNestedInput
    Pictures?: PicturesUncheckedUpdateOneWithoutMovieNestedInput
  }

  export type MovieCreateManyInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
  }

  export type MovieUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MovieUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RentedMovieCreateInput = {
    rentalEndDate?: Date | string | null
    user: UserCreateNestedOneWithoutRentedMovieInput
    movie: MovieCreateNestedOneWithoutRentedMoviesInput
  }

  export type RentedMovieUncheckedCreateInput = {
    userId: string
    movieId: string
    rentalEndDate?: Date | string | null
  }

  export type RentedMovieUpdateInput = {
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutRentedMovieNestedInput
    movie?: MovieUpdateOneRequiredWithoutRentedMoviesNestedInput
  }

  export type RentedMovieUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    movieId?: StringFieldUpdateOperationsInput | string
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentedMovieCreateManyInput = {
    userId: string
    movieId: string
    rentalEndDate?: Date | string | null
  }

  export type RentedMovieUpdateManyMutationInput = {
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentedMovieUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    movieId?: StringFieldUpdateOperationsInput | string
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PicturesCreateInput = {
    id?: string
    path: string
    uploadDate?: Date | string
    tags?: string | null
    description?: string | null
    visibility?: boolean
    movie?: MovieCreateNestedOneWithoutPicturesInput
  }

  export type PicturesUncheckedCreateInput = {
    id?: string
    path: string
    url: string
    uploadDate?: Date | string
    tags?: string | null
    description?: string | null
    visibility?: boolean
  }

  export type PicturesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: BoolFieldUpdateOperationsInput | boolean
    movie?: MovieUpdateOneWithoutPicturesNestedInput
  }

  export type PicturesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PicturesCreateManyInput = {
    id?: string
    path: string
    url: string
    uploadDate?: Date | string
    tags?: string | null
    description?: string | null
    visibility?: boolean
  }

  export type PicturesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PicturesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RentedMovieListRelationFilter = {
    every?: RentedMovieWhereInput
    some?: RentedMovieWhereInput
    none?: RentedMovieWhereInput
  }

  export type RentedMovieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    Role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    Role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    Role?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PicturesNullableRelationFilter = {
    is?: PicturesWhereInput | null
    isNot?: PicturesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MovieCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrder
    rentalPrice?: SortOrder
    releaseYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrder
  }

  export type MovieAvgOrderByAggregateInput = {
    duration?: SortOrder
    releaseYear?: SortOrder
  }

  export type MovieMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrder
    releaseYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrder
  }

  export type MovieMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrder
    releaseYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrder
  }

  export type MovieSumOrderByAggregateInput = {
    duration?: SortOrder
    releaseYear?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MovieRelationFilter = {
    is?: MovieWhereInput
    isNot?: MovieWhereInput
  }

  export type RentedMovieUserIdMovieIdCompoundUniqueInput = {
    userId: string
    movieId: string
  }

  export type RentedMovieCountOrderByAggregateInput = {
    userId?: SortOrder
    movieId?: SortOrder
    rentalEndDate?: SortOrder
  }

  export type RentedMovieMaxOrderByAggregateInput = {
    userId?: SortOrder
    movieId?: SortOrder
    rentalEndDate?: SortOrder
  }

  export type RentedMovieMinOrderByAggregateInput = {
    userId?: SortOrder
    movieId?: SortOrder
    rentalEndDate?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MovieNullableRelationFilter = {
    is?: MovieWhereInput | null
    isNot?: MovieWhereInput | null
  }

  export type PicturesCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    url?: SortOrder
    uploadDate?: SortOrder
    tags?: SortOrder
    description?: SortOrder
    visibility?: SortOrder
  }

  export type PicturesMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    url?: SortOrder
    uploadDate?: SortOrder
    tags?: SortOrder
    description?: SortOrder
    visibility?: SortOrder
  }

  export type PicturesMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    url?: SortOrder
    uploadDate?: SortOrder
    tags?: SortOrder
    description?: SortOrder
    visibility?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RentedMovieCreateNestedManyWithoutUserInput = {
    create?: XOR<RentedMovieCreateWithoutUserInput, RentedMovieUncheckedCreateWithoutUserInput> | RentedMovieCreateWithoutUserInput[] | RentedMovieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutUserInput | RentedMovieCreateOrConnectWithoutUserInput[]
    createMany?: RentedMovieCreateManyUserInputEnvelope
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
  }

  export type RentedMovieUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RentedMovieCreateWithoutUserInput, RentedMovieUncheckedCreateWithoutUserInput> | RentedMovieCreateWithoutUserInput[] | RentedMovieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutUserInput | RentedMovieCreateOrConnectWithoutUserInput[]
    createMany?: RentedMovieCreateManyUserInputEnvelope
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RentedMovieUpdateManyWithoutUserNestedInput = {
    create?: XOR<RentedMovieCreateWithoutUserInput, RentedMovieUncheckedCreateWithoutUserInput> | RentedMovieCreateWithoutUserInput[] | RentedMovieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutUserInput | RentedMovieCreateOrConnectWithoutUserInput[]
    upsert?: RentedMovieUpsertWithWhereUniqueWithoutUserInput | RentedMovieUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RentedMovieCreateManyUserInputEnvelope
    set?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    disconnect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    delete?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    update?: RentedMovieUpdateWithWhereUniqueWithoutUserInput | RentedMovieUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RentedMovieUpdateManyWithWhereWithoutUserInput | RentedMovieUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RentedMovieScalarWhereInput | RentedMovieScalarWhereInput[]
  }

  export type RentedMovieUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RentedMovieCreateWithoutUserInput, RentedMovieUncheckedCreateWithoutUserInput> | RentedMovieCreateWithoutUserInput[] | RentedMovieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutUserInput | RentedMovieCreateOrConnectWithoutUserInput[]
    upsert?: RentedMovieUpsertWithWhereUniqueWithoutUserInput | RentedMovieUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RentedMovieCreateManyUserInputEnvelope
    set?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    disconnect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    delete?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    update?: RentedMovieUpdateWithWhereUniqueWithoutUserInput | RentedMovieUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RentedMovieUpdateManyWithWhereWithoutUserInput | RentedMovieUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RentedMovieScalarWhereInput | RentedMovieScalarWhereInput[]
  }

  export type RentedMovieCreateNestedManyWithoutMovieInput = {
    create?: XOR<RentedMovieCreateWithoutMovieInput, RentedMovieUncheckedCreateWithoutMovieInput> | RentedMovieCreateWithoutMovieInput[] | RentedMovieUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutMovieInput | RentedMovieCreateOrConnectWithoutMovieInput[]
    createMany?: RentedMovieCreateManyMovieInputEnvelope
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
  }

  export type PicturesCreateNestedOneWithoutMovieInput = {
    create?: XOR<PicturesCreateWithoutMovieInput, PicturesUncheckedCreateWithoutMovieInput>
    connectOrCreate?: PicturesCreateOrConnectWithoutMovieInput
    connect?: PicturesWhereUniqueInput
  }

  export type RentedMovieUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<RentedMovieCreateWithoutMovieInput, RentedMovieUncheckedCreateWithoutMovieInput> | RentedMovieCreateWithoutMovieInput[] | RentedMovieUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutMovieInput | RentedMovieCreateOrConnectWithoutMovieInput[]
    createMany?: RentedMovieCreateManyMovieInputEnvelope
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
  }

  export type PicturesUncheckedCreateNestedOneWithoutMovieInput = {
    create?: XOR<PicturesCreateWithoutMovieInput, PicturesUncheckedCreateWithoutMovieInput>
    connectOrCreate?: PicturesCreateOrConnectWithoutMovieInput
    connect?: PicturesWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RentedMovieUpdateManyWithoutMovieNestedInput = {
    create?: XOR<RentedMovieCreateWithoutMovieInput, RentedMovieUncheckedCreateWithoutMovieInput> | RentedMovieCreateWithoutMovieInput[] | RentedMovieUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutMovieInput | RentedMovieCreateOrConnectWithoutMovieInput[]
    upsert?: RentedMovieUpsertWithWhereUniqueWithoutMovieInput | RentedMovieUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: RentedMovieCreateManyMovieInputEnvelope
    set?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    disconnect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    delete?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    update?: RentedMovieUpdateWithWhereUniqueWithoutMovieInput | RentedMovieUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: RentedMovieUpdateManyWithWhereWithoutMovieInput | RentedMovieUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: RentedMovieScalarWhereInput | RentedMovieScalarWhereInput[]
  }

  export type PicturesUpdateOneWithoutMovieNestedInput = {
    create?: XOR<PicturesCreateWithoutMovieInput, PicturesUncheckedCreateWithoutMovieInput>
    connectOrCreate?: PicturesCreateOrConnectWithoutMovieInput
    upsert?: PicturesUpsertWithoutMovieInput
    disconnect?: PicturesWhereInput | boolean
    delete?: PicturesWhereInput | boolean
    connect?: PicturesWhereUniqueInput
    update?: XOR<XOR<PicturesUpdateToOneWithWhereWithoutMovieInput, PicturesUpdateWithoutMovieInput>, PicturesUncheckedUpdateWithoutMovieInput>
  }

  export type RentedMovieUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<RentedMovieCreateWithoutMovieInput, RentedMovieUncheckedCreateWithoutMovieInput> | RentedMovieCreateWithoutMovieInput[] | RentedMovieUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: RentedMovieCreateOrConnectWithoutMovieInput | RentedMovieCreateOrConnectWithoutMovieInput[]
    upsert?: RentedMovieUpsertWithWhereUniqueWithoutMovieInput | RentedMovieUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: RentedMovieCreateManyMovieInputEnvelope
    set?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    disconnect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    delete?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    connect?: RentedMovieWhereUniqueInput | RentedMovieWhereUniqueInput[]
    update?: RentedMovieUpdateWithWhereUniqueWithoutMovieInput | RentedMovieUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: RentedMovieUpdateManyWithWhereWithoutMovieInput | RentedMovieUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: RentedMovieScalarWhereInput | RentedMovieScalarWhereInput[]
  }

  export type PicturesUncheckedUpdateOneWithoutMovieNestedInput = {
    create?: XOR<PicturesCreateWithoutMovieInput, PicturesUncheckedCreateWithoutMovieInput>
    connectOrCreate?: PicturesCreateOrConnectWithoutMovieInput
    upsert?: PicturesUpsertWithoutMovieInput
    disconnect?: PicturesWhereInput | boolean
    delete?: PicturesWhereInput | boolean
    connect?: PicturesWhereUniqueInput
    update?: XOR<XOR<PicturesUpdateToOneWithWhereWithoutMovieInput, PicturesUpdateWithoutMovieInput>, PicturesUncheckedUpdateWithoutMovieInput>
  }

  export type UserCreateNestedOneWithoutRentedMovieInput = {
    create?: XOR<UserCreateWithoutRentedMovieInput, UserUncheckedCreateWithoutRentedMovieInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentedMovieInput
    connect?: UserWhereUniqueInput
  }

  export type MovieCreateNestedOneWithoutRentedMoviesInput = {
    create?: XOR<MovieCreateWithoutRentedMoviesInput, MovieUncheckedCreateWithoutRentedMoviesInput>
    connectOrCreate?: MovieCreateOrConnectWithoutRentedMoviesInput
    connect?: MovieWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutRentedMovieNestedInput = {
    create?: XOR<UserCreateWithoutRentedMovieInput, UserUncheckedCreateWithoutRentedMovieInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentedMovieInput
    upsert?: UserUpsertWithoutRentedMovieInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRentedMovieInput, UserUpdateWithoutRentedMovieInput>, UserUncheckedUpdateWithoutRentedMovieInput>
  }

  export type MovieUpdateOneRequiredWithoutRentedMoviesNestedInput = {
    create?: XOR<MovieCreateWithoutRentedMoviesInput, MovieUncheckedCreateWithoutRentedMoviesInput>
    connectOrCreate?: MovieCreateOrConnectWithoutRentedMoviesInput
    upsert?: MovieUpsertWithoutRentedMoviesInput
    connect?: MovieWhereUniqueInput
    update?: XOR<XOR<MovieUpdateToOneWithWhereWithoutRentedMoviesInput, MovieUpdateWithoutRentedMoviesInput>, MovieUncheckedUpdateWithoutRentedMoviesInput>
  }

  export type MovieCreateNestedOneWithoutPicturesInput = {
    create?: XOR<MovieCreateWithoutPicturesInput, MovieUncheckedCreateWithoutPicturesInput>
    connectOrCreate?: MovieCreateOrConnectWithoutPicturesInput
    connect?: MovieWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type MovieUpdateOneWithoutPicturesNestedInput = {
    create?: XOR<MovieCreateWithoutPicturesInput, MovieUncheckedCreateWithoutPicturesInput>
    connectOrCreate?: MovieCreateOrConnectWithoutPicturesInput
    upsert?: MovieUpsertWithoutPicturesInput
    disconnect?: MovieWhereInput | boolean
    delete?: MovieWhereInput | boolean
    connect?: MovieWhereUniqueInput
    update?: XOR<XOR<MovieUpdateToOneWithWhereWithoutPicturesInput, MovieUpdateWithoutPicturesInput>, MovieUncheckedUpdateWithoutPicturesInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RentedMovieCreateWithoutUserInput = {
    rentalEndDate?: Date | string | null
    movie: MovieCreateNestedOneWithoutRentedMoviesInput
  }

  export type RentedMovieUncheckedCreateWithoutUserInput = {
    movieId: string
    rentalEndDate?: Date | string | null
  }

  export type RentedMovieCreateOrConnectWithoutUserInput = {
    where: RentedMovieWhereUniqueInput
    create: XOR<RentedMovieCreateWithoutUserInput, RentedMovieUncheckedCreateWithoutUserInput>
  }

  export type RentedMovieCreateManyUserInputEnvelope = {
    data: RentedMovieCreateManyUserInput | RentedMovieCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RentedMovieUpsertWithWhereUniqueWithoutUserInput = {
    where: RentedMovieWhereUniqueInput
    update: XOR<RentedMovieUpdateWithoutUserInput, RentedMovieUncheckedUpdateWithoutUserInput>
    create: XOR<RentedMovieCreateWithoutUserInput, RentedMovieUncheckedCreateWithoutUserInput>
  }

  export type RentedMovieUpdateWithWhereUniqueWithoutUserInput = {
    where: RentedMovieWhereUniqueInput
    data: XOR<RentedMovieUpdateWithoutUserInput, RentedMovieUncheckedUpdateWithoutUserInput>
  }

  export type RentedMovieUpdateManyWithWhereWithoutUserInput = {
    where: RentedMovieScalarWhereInput
    data: XOR<RentedMovieUpdateManyMutationInput, RentedMovieUncheckedUpdateManyWithoutUserInput>
  }

  export type RentedMovieScalarWhereInput = {
    AND?: RentedMovieScalarWhereInput | RentedMovieScalarWhereInput[]
    OR?: RentedMovieScalarWhereInput[]
    NOT?: RentedMovieScalarWhereInput | RentedMovieScalarWhereInput[]
    userId?: UuidFilter<"RentedMovie"> | string
    movieId?: UuidFilter<"RentedMovie"> | string
    rentalEndDate?: DateTimeNullableFilter<"RentedMovie"> | Date | string | null
  }

  export type RentedMovieCreateWithoutMovieInput = {
    rentalEndDate?: Date | string | null
    user: UserCreateNestedOneWithoutRentedMovieInput
  }

  export type RentedMovieUncheckedCreateWithoutMovieInput = {
    userId: string
    rentalEndDate?: Date | string | null
  }

  export type RentedMovieCreateOrConnectWithoutMovieInput = {
    where: RentedMovieWhereUniqueInput
    create: XOR<RentedMovieCreateWithoutMovieInput, RentedMovieUncheckedCreateWithoutMovieInput>
  }

  export type RentedMovieCreateManyMovieInputEnvelope = {
    data: RentedMovieCreateManyMovieInput | RentedMovieCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type PicturesCreateWithoutMovieInput = {
    id?: string
    path: string
    uploadDate?: Date | string
    tags?: string | null
    description?: string | null
    visibility?: boolean
  }

  export type PicturesUncheckedCreateWithoutMovieInput = {
    id?: string
    path: string
    uploadDate?: Date | string
    tags?: string | null
    description?: string | null
    visibility?: boolean
  }

  export type PicturesCreateOrConnectWithoutMovieInput = {
    where: PicturesWhereUniqueInput
    create: XOR<PicturesCreateWithoutMovieInput, PicturesUncheckedCreateWithoutMovieInput>
  }

  export type RentedMovieUpsertWithWhereUniqueWithoutMovieInput = {
    where: RentedMovieWhereUniqueInput
    update: XOR<RentedMovieUpdateWithoutMovieInput, RentedMovieUncheckedUpdateWithoutMovieInput>
    create: XOR<RentedMovieCreateWithoutMovieInput, RentedMovieUncheckedCreateWithoutMovieInput>
  }

  export type RentedMovieUpdateWithWhereUniqueWithoutMovieInput = {
    where: RentedMovieWhereUniqueInput
    data: XOR<RentedMovieUpdateWithoutMovieInput, RentedMovieUncheckedUpdateWithoutMovieInput>
  }

  export type RentedMovieUpdateManyWithWhereWithoutMovieInput = {
    where: RentedMovieScalarWhereInput
    data: XOR<RentedMovieUpdateManyMutationInput, RentedMovieUncheckedUpdateManyWithoutMovieInput>
  }

  export type PicturesUpsertWithoutMovieInput = {
    update: XOR<PicturesUpdateWithoutMovieInput, PicturesUncheckedUpdateWithoutMovieInput>
    create: XOR<PicturesCreateWithoutMovieInput, PicturesUncheckedCreateWithoutMovieInput>
    where?: PicturesWhereInput
  }

  export type PicturesUpdateToOneWithWhereWithoutMovieInput = {
    where?: PicturesWhereInput
    data: XOR<PicturesUpdateWithoutMovieInput, PicturesUncheckedUpdateWithoutMovieInput>
  }

  export type PicturesUpdateWithoutMovieInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PicturesUncheckedUpdateWithoutMovieInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateWithoutRentedMovieInput = {
    id?: string
    email: string
    password: string
    Role: string
  }

  export type UserUncheckedCreateWithoutRentedMovieInput = {
    id?: string
    email: string
    password: string
    Role: string
  }

  export type UserCreateOrConnectWithoutRentedMovieInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRentedMovieInput, UserUncheckedCreateWithoutRentedMovieInput>
  }

  export type MovieCreateWithoutRentedMoviesInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    Pictures?: PicturesCreateNestedOneWithoutMovieInput
  }

  export type MovieUncheckedCreateWithoutRentedMoviesInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    Pictures?: PicturesUncheckedCreateNestedOneWithoutMovieInput
  }

  export type MovieCreateOrConnectWithoutRentedMoviesInput = {
    where: MovieWhereUniqueInput
    create: XOR<MovieCreateWithoutRentedMoviesInput, MovieUncheckedCreateWithoutRentedMoviesInput>
  }

  export type UserUpsertWithoutRentedMovieInput = {
    update: XOR<UserUpdateWithoutRentedMovieInput, UserUncheckedUpdateWithoutRentedMovieInput>
    create: XOR<UserCreateWithoutRentedMovieInput, UserUncheckedCreateWithoutRentedMovieInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRentedMovieInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRentedMovieInput, UserUncheckedUpdateWithoutRentedMovieInput>
  }

  export type UserUpdateWithoutRentedMovieInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutRentedMovieInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
  }

  export type MovieUpsertWithoutRentedMoviesInput = {
    update: XOR<MovieUpdateWithoutRentedMoviesInput, MovieUncheckedUpdateWithoutRentedMoviesInput>
    create: XOR<MovieCreateWithoutRentedMoviesInput, MovieUncheckedCreateWithoutRentedMoviesInput>
    where?: MovieWhereInput
  }

  export type MovieUpdateToOneWithWhereWithoutRentedMoviesInput = {
    where?: MovieWhereInput
    data: XOR<MovieUpdateWithoutRentedMoviesInput, MovieUncheckedUpdateWithoutRentedMoviesInput>
  }

  export type MovieUpdateWithoutRentedMoviesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    Pictures?: PicturesUpdateOneWithoutMovieNestedInput
  }

  export type MovieUncheckedUpdateWithoutRentedMoviesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    Pictures?: PicturesUncheckedUpdateOneWithoutMovieNestedInput
  }

  export type MovieCreateWithoutPicturesInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    rentedMovies?: RentedMovieCreateNestedManyWithoutMovieInput
  }

  export type MovieUncheckedCreateWithoutPicturesInput = {
    id?: string
    title: string
    description: string
    genre: string
    duration: number
    imageUrl?: string | null
    rentalPrice: JsonNullValueInput | InputJsonValue
    releaseYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    rentedMovies?: RentedMovieUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MovieCreateOrConnectWithoutPicturesInput = {
    where: MovieWhereUniqueInput
    create: XOR<MovieCreateWithoutPicturesInput, MovieUncheckedCreateWithoutPicturesInput>
  }

  export type MovieUpsertWithoutPicturesInput = {
    update: XOR<MovieUpdateWithoutPicturesInput, MovieUncheckedUpdateWithoutPicturesInput>
    create: XOR<MovieCreateWithoutPicturesInput, MovieUncheckedCreateWithoutPicturesInput>
    where?: MovieWhereInput
  }

  export type MovieUpdateToOneWithWhereWithoutPicturesInput = {
    where?: MovieWhereInput
    data: XOR<MovieUpdateWithoutPicturesInput, MovieUncheckedUpdateWithoutPicturesInput>
  }

  export type MovieUpdateWithoutPicturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    rentedMovies?: RentedMovieUpdateManyWithoutMovieNestedInput
  }

  export type MovieUncheckedUpdateWithoutPicturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rentalPrice?: JsonNullValueInput | InputJsonValue
    releaseYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    rentedMovies?: RentedMovieUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type RentedMovieCreateManyUserInput = {
    movieId: string
    rentalEndDate?: Date | string | null
  }

  export type RentedMovieUpdateWithoutUserInput = {
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    movie?: MovieUpdateOneRequiredWithoutRentedMoviesNestedInput
  }

  export type RentedMovieUncheckedUpdateWithoutUserInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentedMovieUncheckedUpdateManyWithoutUserInput = {
    movieId?: StringFieldUpdateOperationsInput | string
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentedMovieCreateManyMovieInput = {
    userId: string
    rentalEndDate?: Date | string | null
  }

  export type RentedMovieUpdateWithoutMovieInput = {
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutRentedMovieNestedInput
  }

  export type RentedMovieUncheckedUpdateWithoutMovieInput = {
    userId?: StringFieldUpdateOperationsInput | string
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentedMovieUncheckedUpdateManyWithoutMovieInput = {
    userId?: StringFieldUpdateOperationsInput | string
    rentalEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieCountOutputTypeDefaultArgs instead
     */
    export type MovieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieDefaultArgs instead
     */
    export type MovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RentedMovieDefaultArgs instead
     */
    export type RentedMovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RentedMovieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PicturesDefaultArgs instead
     */
    export type PicturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PicturesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}